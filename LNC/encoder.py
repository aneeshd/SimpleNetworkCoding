# By Kishoj Bajracharya
import numpy

coeffs=[[1,1,1], [2,1,1], [1,2,1]]
# test: coeffs=[[1,1,2], [2,1,1], [1,2,1]]

# Code for random linear coding
def linearCode(x, y, z):
	ilist = []
	a = coeffs[0][0]*x + coeffs[0][1]*y + coeffs[0][2]*z
	b = coeffs[1][0]*x + coeffs[1][1]*y + coeffs[1][2]*z
	c = coeffs[2][0]*x + coeffs[2][1]*y + coeffs[2][2]*z
	ilist.append(numpy.float64(coeffs[0][0]))
	ilist.append(numpy.float64(coeffs[0][1]))
	ilist.append(numpy.float64(coeffs[0][2]))
	ilist.append(numpy.float64(a))

	ilist.append(numpy.float64(coeffs[1][0]))
	ilist.append(numpy.float64(coeffs[1][1]))
	ilist.append(numpy.float64(coeffs[1][2]))
	ilist.append(numpy.float64(b))

	ilist.append(numpy.float64(coeffs[2][0]))
	ilist.append(numpy.float64(coeffs[2][1]))
	ilist.append(numpy.float64(coeffs[2][2]))
	ilist.append(numpy.float64(c))
	return ilist

def xorCode(x, y, z):
	ilist = []
	a = 1*x ^ 1*y ^ 1*z
	b = 0*x ^ 1*y ^ 1*z
	c = 1*x ^ 0*y ^ 1*z
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(a))

	ilist.append(numpy.float64(0))
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(b))

	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(0))
	ilist.append(numpy.float64(1))
	ilist.append(numpy.float64(c))
	
	#print '-->', [x,y,z], [a,b,c]
	return ilist

code1=linearCode
code1=xorCode

def encode1(x, y, z):
	li = code1(x, y, z)
	#for a in li: 
	#	print a
	listOfEqns = split(4, li)
	return listOfEqns

def split(n, iter, fill=None):
    return [iter[i:i+n] + [fill] * (i + n - len(iter))
            for i in xrange(0, len(iter), n)]

def ListOfCharToListOfInt(alist):
	return [ord(x) for x in alist]

def encode(a, b, c):
	# Packets whose values are conveted into the decimal values
	p = ListOfCharToListOfInt(a)
	#print p
	q = ListOfCharToListOfInt(b)
	#print q
	r = ListOfCharToListOfInt(c)
	#print r

	# Perform an encoding operation using Random Linear Coding
	encodedlist = [encode1(data[0], data[1], data[2]) for data in zip(p, q, r)]

	return encodedlist

class SelfTest:
	# Initial data from the three different source nodes
	a='HelloabcdeAppleAppleHelloabcdeHelloabcdeAppleAppleHelloabcdeHelloabcdeAppleAppleHelloabcdeHelloabcdeAppleAppleHelloabcdeHelloabcdeAppleAppleHelloabcde'
	b='abcdeAppleHelloHelloabcdeAppleabcdeAppleHelloHelloabcdeAppleabcdeAppleHelloHelloabcdeAppleabcdeAppleHelloHelloabcdeAppleabcdeAppleHelloHelloabcdeApple'
	c='AppleHelloabcdeabcdeAppleHelloAppleHelloabcdeabcdeAppleHelloAppleHelloabcdeabcdeAppleHelloAppleHelloabcdeabcdeAppleHelloAppleHelloabcdeabcdeAppleHello'

if code1==linearCode and coeffs==[[1,1,1], [2,1,1], [1,2,1]]:
	SelfTest.gold='''[[[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 299.0], [1.0, 2.0, 1.0, 306.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 423.0], [1.0, 2.0, 1.0, 412.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 431.0], [1.0, 2.0, 1.0, 427.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 306.0], [1.0, 2.0, 1.0, 331.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 412.0], [1.0, 2.0, 1.0, 409.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 427.0], [1.0, 2.0, 1.0, 418.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 416.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 424.0], [1.0, 2.0, 1.0, 414.0]], [[1.0, 1.0, 1.0, 234.0], [2.0, 1.0, 1.0, 331.0], [1.0, 2.0, 1.0, 299.0]], [[1.0, 1.0, 1.0, 311.0], [2.0, 1.0, 1.0, 409.0], [1.0, 2.0, 1.0, 423.0]], [[1.0, 1.0, 1.0, 319.0], [2.0, 1.0, 1.0, 418.0], [1.0, 2.0, 1.0, 431.0]], [[1.0, 1.0, 1.0, 316.0], [2.0, 1.0, 1.0, 416.0], [1.0, 2.0, 1.0, 424.0]], [[1.0, 1.0, 1.0, 313.0], [2.0, 1.0, 1.0, 414.0], [1.0, 2.0, 1.0, 414.0]]]'''

else:
	# not really a self test at all
	SelfTest.gold=str( encode(SelfTest.a, SelfTest.b, SelfTest.c) )

if __name__=='__main__':
	encodedlist=encode(SelfTest.a, SelfTest.b, SelfTest.c)
	#print encodedlist
	encoded_mess = str(encodedlist)
	#print 'Encoded Message'
	#print encoded_mess

	print encoded_mess==SelfTest.gold
	print encodedlist==eval(SelfTest.gold)
